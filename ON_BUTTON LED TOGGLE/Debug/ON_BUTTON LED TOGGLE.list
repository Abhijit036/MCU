
ON_BUTTON LED TOGGLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000230  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c8  080003c8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c8  080003c8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003c8  080003c8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c8  080003c8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c8  080003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003cc  080003cc  000103cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003d0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003d4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003d4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001318  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004c5  00000000  00000000  0002134c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  00021818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000180  00000000  00000000  000219e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013bf6  00000000  00000000  00021b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ea9  00000000  00000000  00035756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e5d1  00000000  00000000  000375ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b5bd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000550  00000000  00000000  000b5c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003b0 	.word	0x080003b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080003b0 	.word	0x080003b0

080001d8 <delay>:
#include "stm32f4xx.h"
void delay(int T){
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	int i;
	while(T--){
 80001e0:	e00a      	b.n	80001f8 <delay+0x20>
	for(i=0;i<5000;i++);}
 80001e2:	2300      	movs	r3, #0
 80001e4:	60fb      	str	r3, [r7, #12]
 80001e6:	e002      	b.n	80001ee <delay+0x16>
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	3301      	adds	r3, #1
 80001ec:	60fb      	str	r3, [r7, #12]
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	f241 3287 	movw	r2, #4999	; 0x1387
 80001f4:	4293      	cmp	r3, r2
 80001f6:	ddf7      	ble.n	80001e8 <delay+0x10>
	while(T--){
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	1e5a      	subs	r2, r3, #1
 80001fc:	607a      	str	r2, [r7, #4]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d1ef      	bne.n	80001e2 <delay+0xa>
}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	3714      	adds	r7, #20
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <main>:
int main()
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |=0x5;
 8000214:	4b14      	ldr	r3, [pc, #80]	; (8000268 <main+0x58>)
 8000216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000218:	4a13      	ldr	r2, [pc, #76]	; (8000268 <main+0x58>)
 800021a:	f043 0305 	orr.w	r3, r3, #5
 800021e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |=0x400;
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <main+0x5c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a11      	ldr	r2, [pc, #68]	; (800026c <main+0x5c>)
 8000226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800022a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=0x0;
 800022c:	4b10      	ldr	r3, [pc, #64]	; (8000270 <main+0x60>)
 800022e:	4a10      	ldr	r2, [pc, #64]	; (8000270 <main+0x60>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	6013      	str	r3, [r2, #0]
	while(1)
	{
		if(GPIOA->IDR & 2000)
 8000234:	4b0d      	ldr	r3, [pc, #52]	; (800026c <main+0x5c>)
 8000236:	691b      	ldr	r3, [r3, #16]
 8000238:	f403 63fa 	and.w	r3, r3, #2000	; 0x7d0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d009      	beq.n	8000254 <main+0x44>
		{
		GPIOA->BSRR |=0x200000;
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <main+0x5c>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	4a09      	ldr	r2, [pc, #36]	; (800026c <main+0x5c>)
 8000246:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800024a:	6193      	str	r3, [r2, #24]
		delay(50);
 800024c:	2032      	movs	r0, #50	; 0x32
 800024e:	f7ff ffc3 	bl	80001d8 <delay>
 8000252:	e7ef      	b.n	8000234 <main+0x24>
		}
		else
			{
			GPIOA->BSRR |=0x20;
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <main+0x5c>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a04      	ldr	r2, [pc, #16]	; (800026c <main+0x5c>)
 800025a:	f043 0320 	orr.w	r3, r3, #32
 800025e:	6193      	str	r3, [r2, #24]
			delay(50);
 8000260:	2032      	movs	r0, #50	; 0x32
 8000262:	f7ff ffb9 	bl	80001d8 <delay>
		if(GPIOA->IDR & 2000)
 8000266:	e7e5      	b.n	8000234 <main+0x24>
 8000268:	40023800 	.word	0x40023800
 800026c:	40020000 	.word	0x40020000
 8000270:	40020800 	.word	0x40020800

08000274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000278:	e7fe      	b.n	8000278 <NMI_Handler+0x4>

0800027a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800027a:	b480      	push	{r7}
 800027c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800027e:	e7fe      	b.n	800027e <HardFault_Handler+0x4>

08000280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000284:	e7fe      	b.n	8000284 <MemManage_Handler+0x4>

08000286 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000286:	b480      	push	{r7}
 8000288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800028a:	e7fe      	b.n	800028a <BusFault_Handler+0x4>

0800028c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000290:	e7fe      	b.n	8000290 <UsageFault_Handler+0x4>

08000292 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000292:	b480      	push	{r7}
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000296:	bf00      	nop
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr

080002a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr

080002ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002ae:	b480      	push	{r7}
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002b2:	bf00      	nop
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002c0:	f000 f83e 	bl	8000340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <SystemInit+0x20>)
 80002ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002d2:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <SystemInit+0x20>)
 80002d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e000ed00 	.word	0xe000ed00

080002ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80002ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000324 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002f0:	480d      	ldr	r0, [pc, #52]	; (8000328 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80002f2:	490e      	ldr	r1, [pc, #56]	; (800032c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80002f4:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f8:	e002      	b.n	8000300 <LoopCopyDataInit>

080002fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fe:	3304      	adds	r3, #4

08000300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000304:	d3f9      	bcc.n	80002fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000306:	4a0b      	ldr	r2, [pc, #44]	; (8000334 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000308:	4c0b      	ldr	r4, [pc, #44]	; (8000338 <LoopFillZerobss+0x26>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800030c:	e001      	b.n	8000312 <LoopFillZerobss>

0800030e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000310:	3204      	adds	r2, #4

08000312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000314:	d3fb      	bcc.n	800030e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000316:	f7ff ffd7 	bl	80002c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800031a:	f000 f825 	bl	8000368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800031e:	f7ff ff77 	bl	8000210 <main>
  bx  lr    
 8000322:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800032c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000330:	080003d0 	.word	0x080003d0
  ldr r2, =_sbss
 8000334:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000338:	20000024 	.word	0x20000024

0800033c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800033c:	e7fe      	b.n	800033c <ADC_IRQHandler>
	...

08000340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <HAL_IncTick+0x20>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	461a      	mov	r2, r3
 800034a:	4b06      	ldr	r3, [pc, #24]	; (8000364 <HAL_IncTick+0x24>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4413      	add	r3, r2
 8000350:	4a04      	ldr	r2, [pc, #16]	; (8000364 <HAL_IncTick+0x24>)
 8000352:	6013      	str	r3, [r2, #0]
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	20000000 	.word	0x20000000
 8000364:	20000020 	.word	0x20000020

08000368 <__libc_init_array>:
 8000368:	b570      	push	{r4, r5, r6, lr}
 800036a:	4d0d      	ldr	r5, [pc, #52]	; (80003a0 <__libc_init_array+0x38>)
 800036c:	4c0d      	ldr	r4, [pc, #52]	; (80003a4 <__libc_init_array+0x3c>)
 800036e:	1b64      	subs	r4, r4, r5
 8000370:	10a4      	asrs	r4, r4, #2
 8000372:	2600      	movs	r6, #0
 8000374:	42a6      	cmp	r6, r4
 8000376:	d109      	bne.n	800038c <__libc_init_array+0x24>
 8000378:	4d0b      	ldr	r5, [pc, #44]	; (80003a8 <__libc_init_array+0x40>)
 800037a:	4c0c      	ldr	r4, [pc, #48]	; (80003ac <__libc_init_array+0x44>)
 800037c:	f000 f818 	bl	80003b0 <_init>
 8000380:	1b64      	subs	r4, r4, r5
 8000382:	10a4      	asrs	r4, r4, #2
 8000384:	2600      	movs	r6, #0
 8000386:	42a6      	cmp	r6, r4
 8000388:	d105      	bne.n	8000396 <__libc_init_array+0x2e>
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000390:	4798      	blx	r3
 8000392:	3601      	adds	r6, #1
 8000394:	e7ee      	b.n	8000374 <__libc_init_array+0xc>
 8000396:	f855 3b04 	ldr.w	r3, [r5], #4
 800039a:	4798      	blx	r3
 800039c:	3601      	adds	r6, #1
 800039e:	e7f2      	b.n	8000386 <__libc_init_array+0x1e>
 80003a0:	080003c8 	.word	0x080003c8
 80003a4:	080003c8 	.word	0x080003c8
 80003a8:	080003c8 	.word	0x080003c8
 80003ac:	080003cc 	.word	0x080003cc

080003b0 <_init>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr

080003bc <_fini>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr
