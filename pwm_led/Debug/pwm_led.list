
pwm_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000022c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c4  080003cc  000103cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c4  080003c4  000103cc  2**0
                  CONTENTS
  4 .ARM          00000000  080003c4  080003c4  000103cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c4  080003cc  000103cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c4  080003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c8  080003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003cc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003cc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a2a  00000000  00000000  000103fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000217  00000000  00000000  00010e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00011040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  000110b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001417d  00000000  00000000  00011108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ed1  00000000  00000000  00025285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084aea  00000000  00000000  00026156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000aac40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000d8  00000000  00000000  000aac90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003ac 	.word	0x080003ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003ac 	.word	0x080003ac

080001d8 <main>:
 *      Author: PHY202209EF08
 */
#include "stm32f4xx.h"
void delayMs(int n);
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=1;
 80001dc:	4b31      	ldr	r3, [pc, #196]	; (80002a4 <main+0xcc>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a30      	ldr	r2, [pc, #192]	; (80002a4 <main+0xcc>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &=~(3<<10);
 80001e8:	4b2f      	ldr	r3, [pc, #188]	; (80002a8 <main+0xd0>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a2e      	ldr	r2, [pc, #184]	; (80002a8 <main+0xd0>)
 80001ee:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1<<11);
 80001f4:	4b2c      	ldr	r3, [pc, #176]	; (80002a8 <main+0xd0>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a2b      	ldr	r2, [pc, #172]	; (80002a8 <main+0xd0>)
 80001fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80001fe:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~(0xF<<20);
 8000200:	4b29      	ldr	r3, [pc, #164]	; (80002a8 <main+0xd0>)
 8000202:	6a1b      	ldr	r3, [r3, #32]
 8000204:	4a28      	ldr	r2, [pc, #160]	; (80002a8 <main+0xd0>)
 8000206:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800020a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 1<<20;
 800020c:	4b26      	ldr	r3, [pc, #152]	; (80002a8 <main+0xd0>)
 800020e:	6a1b      	ldr	r3, [r3, #32]
 8000210:	4a25      	ldr	r2, [pc, #148]	; (80002a8 <main+0xd0>)
 8000212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000216:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR |=1;
 8000218:	4b22      	ldr	r3, [pc, #136]	; (80002a4 <main+0xcc>)
 800021a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800021c:	4a21      	ldr	r2, [pc, #132]	; (80002a4 <main+0xcc>)
 800021e:	f043 0301 	orr.w	r3, r3, #1
 8000222:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->PSC=10-1;
 8000224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000228:	2209      	movs	r2, #9
 800022a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR=32000-1;
 800022c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000230:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000234:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT=0;
 8000236:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800023a:	2200      	movs	r2, #0
 800023c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CCMR1=0x0068;
 800023e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000242:	2268      	movs	r2, #104	; 0x68
 8000244:	619a      	str	r2, [r3, #24]
	TIM2->CCER=1;
 8000246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800024a:	2201      	movs	r2, #1
 800024c:	621a      	str	r2, [r3, #32]
	TIM2->CCR1=32;
 800024e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000252:	2220      	movs	r2, #32
 8000254:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->BDTR |=0x8000;
 8000256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800025a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800025c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000264:	6453      	str	r3, [r2, #68]	; 0x44
	TIM2->CR1=1;
 8000266:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800026a:	2201      	movs	r2, #1
 800026c:	601a      	str	r2, [r3, #0]

	while(1)
	{
		TIM2->CCR1 = TIM2->CCR1 * 110/100;
 800026e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000274:	226e      	movs	r2, #110	; 0x6e
 8000276:	fb02 f303 	mul.w	r3, r2, r3
 800027a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800027e:	490b      	ldr	r1, [pc, #44]	; (80002ac <main+0xd4>)
 8000280:	fba1 1303 	umull	r1, r3, r1, r3
 8000284:	095b      	lsrs	r3, r3, #5
 8000286:	6353      	str	r3, [r2, #52]	; 0x34
		if(TIM2->CCR1 > 32000)
 8000288:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800028c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800028e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000292:	d903      	bls.n	800029c <main+0xc4>
			TIM2->CCR1 =32;
 8000294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000298:	2220      	movs	r2, #32
 800029a:	635a      	str	r2, [r3, #52]	; 0x34
		delayMs(20);
 800029c:	2014      	movs	r0, #20
 800029e:	f000 f807 	bl	80002b0 <delayMs>
		TIM2->CCR1 = TIM2->CCR1 * 110/100;
 80002a2:	e7e4      	b.n	800026e <main+0x96>
 80002a4:	40023800 	.word	0x40023800
 80002a8:	40020000 	.word	0x40020000
 80002ac:	51eb851f 	.word	0x51eb851f

080002b0 <delayMs>:
	}
}
void delayMs(int n){
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	int i;
	for(;n>0;n--)
 80002b8:	e00d      	b.n	80002d6 <delayMs+0x26>
		for(i=0;i<3195;i++);
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	e002      	b.n	80002c6 <delayMs+0x16>
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	f640 427a 	movw	r2, #3194	; 0xc7a
 80002cc:	4293      	cmp	r3, r2
 80002ce:	ddf7      	ble.n	80002c0 <delayMs+0x10>
	for(;n>0;n--)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	3b01      	subs	r3, #1
 80002d4:	607b      	str	r3, [r7, #4]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	dcee      	bgt.n	80002ba <delayMs+0xa>
}
 80002dc:	bf00      	nop
 80002de:	bf00      	nop
 80002e0:	3714      	adds	r7, #20
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
	...

080002ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <SystemInit+0x20>)
 80002f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002f6:	4a05      	ldr	r2, [pc, #20]	; (800030c <SystemInit+0x20>)
 80002f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000348 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000314:	480d      	ldr	r0, [pc, #52]	; (800034c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000316:	490e      	ldr	r1, [pc, #56]	; (8000350 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000318:	4a0e      	ldr	r2, [pc, #56]	; (8000354 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800031c:	e002      	b.n	8000324 <LoopCopyDataInit>

0800031e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000322:	3304      	adds	r3, #4

08000324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000328:	d3f9      	bcc.n	800031e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032a:	4a0b      	ldr	r2, [pc, #44]	; (8000358 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800032c:	4c0b      	ldr	r4, [pc, #44]	; (800035c <LoopFillZerobss+0x26>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000330:	e001      	b.n	8000336 <LoopFillZerobss>

08000332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000334:	3204      	adds	r2, #4

08000336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000338:	d3fb      	bcc.n	8000332 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800033a:	f7ff ffd7 	bl	80002ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800033e:	f000 f811 	bl	8000364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000342:	f7ff ff49 	bl	80001d8 <main>
  bx  lr    
 8000346:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000348:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800034c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000350:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000354:	080003cc 	.word	0x080003cc
  ldr r2, =_sbss
 8000358:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800035c:	2000001c 	.word	0x2000001c

08000360 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000360:	e7fe      	b.n	8000360 <ADC_IRQHandler>
	...

08000364 <__libc_init_array>:
 8000364:	b570      	push	{r4, r5, r6, lr}
 8000366:	4d0d      	ldr	r5, [pc, #52]	; (800039c <__libc_init_array+0x38>)
 8000368:	4c0d      	ldr	r4, [pc, #52]	; (80003a0 <__libc_init_array+0x3c>)
 800036a:	1b64      	subs	r4, r4, r5
 800036c:	10a4      	asrs	r4, r4, #2
 800036e:	2600      	movs	r6, #0
 8000370:	42a6      	cmp	r6, r4
 8000372:	d109      	bne.n	8000388 <__libc_init_array+0x24>
 8000374:	4d0b      	ldr	r5, [pc, #44]	; (80003a4 <__libc_init_array+0x40>)
 8000376:	4c0c      	ldr	r4, [pc, #48]	; (80003a8 <__libc_init_array+0x44>)
 8000378:	f000 f818 	bl	80003ac <_init>
 800037c:	1b64      	subs	r4, r4, r5
 800037e:	10a4      	asrs	r4, r4, #2
 8000380:	2600      	movs	r6, #0
 8000382:	42a6      	cmp	r6, r4
 8000384:	d105      	bne.n	8000392 <__libc_init_array+0x2e>
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f855 3b04 	ldr.w	r3, [r5], #4
 800038c:	4798      	blx	r3
 800038e:	3601      	adds	r6, #1
 8000390:	e7ee      	b.n	8000370 <__libc_init_array+0xc>
 8000392:	f855 3b04 	ldr.w	r3, [r5], #4
 8000396:	4798      	blx	r3
 8000398:	3601      	adds	r6, #1
 800039a:	e7f2      	b.n	8000382 <__libc_init_array+0x1e>
 800039c:	080003c4 	.word	0x080003c4
 80003a0:	080003c4 	.word	0x080003c4
 80003a4:	080003c4 	.word	0x080003c4
 80003a8:	080003c8 	.word	0x080003c8

080003ac <_init>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr

080003b8 <_fini>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr
